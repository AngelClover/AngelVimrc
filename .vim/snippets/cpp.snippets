# std::map
snippet set
	set<${1:int}> ${2};
snippet map
	map<${1:int}, ${2:int}> ${3};
# std::vector
snippet vector
	vector<${1:int}> ${2};
# Namespace
# Class

snippet ifndef
	#ifndef $1
	#define ${1:SYMBOL}
	#endif //$1

snippet def
	#define 

snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif

snippet class
	class ${1:myclass} {
	private:
		${2}
	public:
		${1} ();
	};

# main()
snippet main
	int main(int argc, const char *argv[])
	{
		${1}
		return 0;
	}
# #include <...>
snippet inc
	#include <${1:cstdio}>${2}

snippet if
	if (${1}) {
		${2}
	}
snippet elif
	else if (${1}) {
		${2}
	}
snippet else
	else {
		${1}
	}
# Tertiary conditional
snippet t
	${1:} ? ${2:} : ${3:}
# Do While Loop
snippet do
	do {
		${2}
	} while (${1});
# While Loop
snippet while
	while (${1}) {
	}
# For Loop
snippet for
	for (${1}) {
	}
# Function
snippet func
	${1:int} ${2:function}(${3})
	{
		${4}
		return 0;
	}
# Function Declaration
# Typedef
snippet typedef
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet struct
	struct ${1} {
		${2}
	};
snippet pr
	printf("line:%d | %s :${1}\n", __LINE__, __PRETTY_FUNCTION__,${2});${3}

# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:}\n");${3}
snippet .
	[${1}]${2}
snippet bslog
	BASA_BS_LOG(UL_LOG_WARNING, "Angel ${1:%d}", ${2});
